[build-system]
requires = ["setuptools >= 74.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "engilearn"
description="A suite of benchmarks for automated engineering design."
readme = "README.md"
requires-python = ">= 3.9"
authors = [{ name = "Florian Felten", email = "ffelten@mavt.ethz.ch" }]
license = { text = "MIT License" }
keywords = ["Mechanical Engineering", "AI", "Optimization"]
classifiers = [
    "Development Status :: 4 - Beta",  # change to `5 - Production/Stable` when ready
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
]
dependencies = [
#    "engibench[all]",
    "tyro >=0.9.2",
    "numpy",
    "torch >= 2.5.0",
    "torchvision >= 0.20.1",
    "wandb >= 0.18.7",
    "tqdm >= 4.67.1",
    "matplotlib >= 3.9.2",
    "denoising_diffusion_pytorch"
]
dynamic = ["version"]

[project.optional-dependencies]
# Update dependencies in `all` if any are added or removed
all = [
    # All dependencies above
    # NOTE: No need to manually remove the duplicates, setuptools automatically does that.
]

testing = ["pytest ==8.3.2"]

[project.urls]
Homepage = "TODO"
Repository = "TODO"
Documentation = "TODO"
"Bug Report" = "TODO"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["engilearn", "enginlearn.*"]

[tool.setuptools.package-data]
engibench = [
    "**/*.json",
    "**/assets/*",
]

############################################# Linters and Test tools #######################################################

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "templates",
    "venv",
    "docs",
]

# Same as Black.
line-length = 124
indent-width = 4

# Assume Python 3.9
target-version = "py39"


######################################## LINTING ########################################
[tool.ruff.lint]
select = [
    "E",      # pycodestyle
    "W",      # pycodestyle warnings
    "F",      # flake
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgade
    "ANN",    # flake8-annotations
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "FA",     # flake8-future-annotations
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PL",     # Pylint
    "TRY",    # tryceratops
    "PERF",   # perflint
    "RUF",    # Ruff specific
    ]
ignore = [
    "E501", # Ruff black style takes care of line length
    "ANN003", # Kwargs type hinting is not necessary
    "B006", # Do not use mutable default arguments
    "D101", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "ANN204", # Missing type annotation for init method
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Google format for docstring
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.isort]
# Settings for google standard.
force-single-line = true
force-sort-within-sections = true
single-line-exclusions = [
    "typing",
    "collections.abc",
    "typing_extensions",
]
order-by-type = false



######################################## PER FILE IGNORES ########################################
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "B018",    # B018 - Found useless expression - necessary for testing exceptions are raised.
    "D100",    # D100 - Module dostrings not required in test files.
    "D104",    # D104 - Package dostrings not required in test files.
    "ARG",     # ARG - Unused args are common in tests with mock patches and mock functions.
    "D",       # Pydocstyle
]
"*/__init__.py" = [
    "F401",    # Module imported but unused
    "D104",    # D104 - Package dostrings not required in init files.
    "E402"
]
"docs/**" = [
    "D",       # Pydocstyle
]
"setup.py" = [
    "D",       # Pydocstyle
    "ANN",      # annotations
    "SIM",      # simplify
    "TRY",      # tryceratops

]


###################################### FORMAT ########################################
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"



###################################### PYRIGHT ########################################
[tool.pyright]
include = ["engilearn/**"]
exclude = ["**/node_modules", "**/__pycache__", "**/templates/**", "**/study*"]
strict = []

typeCheckingMode = "basic"
pythonVersion = "3.9"
pythonPlatform = "All"
typeshedPath = "typeshed"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"
# Some modules are missing type stubs, which is an issue when running pyright locally
reportMissingTypeStubs = false
# For warning and error, will raise an error when
reportInvalidTypeVarUse = "none"
reportOptionalSubscript = "none"

reportGeneralTypeIssues = "none"  # -> commented out raises 489 errors
# reportUntypedFunctionDecorator = "none"  # -> pytest.mark.parameterize issues

# reportOptionalMemberAccess = "none" # -> commented out raises warnings
reportPrivateImportUsage = "warning" # ->

reportPrivateUsage = "warning"
reportUnboundVariable = "warning"
